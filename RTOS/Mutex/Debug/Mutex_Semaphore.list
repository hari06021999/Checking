
Mutex_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004064  20000010  08004d64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004074  08004d64  00024074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012513  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297f  00000000  00000000  00032553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00034ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00035ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023763  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013311  00000000  00000000  0005a513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9060  00000000  00000000  0006d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004238  00000000  00000000  001468d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c60 	.word	0x08004c60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004c60 	.word	0x08004c60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000002c 	.word	0x2000002c
 8000554:	20000080 	.word	0x20000080

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 fb57 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f855 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f8eb 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056a:	f000 f8bf 	bl	80006ec <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
   SimpleMutex = xSemaphoreCreateMutex();
 800056e:	2001      	movs	r0, #1
 8000570:	f002 fc39 	bl	8002de6 <xQueueCreateMutex>
 8000574:	4603      	mov	r3, r0
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <main+0x88>)
 8000578:	6013      	str	r3, [r2, #0]
   if(SimpleMutex != NULL)
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <main+0x88>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <main+0x38>
   {
	   HAL_UART_Transmit(&huart2, "Mutex Created\n", 16, 1000);
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	2210      	movs	r2, #16
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <main+0x8c>)
 800058a:	4817      	ldr	r0, [pc, #92]	; (80005e8 <main+0x90>)
 800058c:	f001 ff27 	bl	80023de <HAL_UART_Transmit>
//   if(BinSemaphore != NULL)
//   {
//	   HAL_UART_Transmit(&huart2, "BinSem Created\n", 16, 1000);
//   }

   xSemaphoreTake(SimpleMutex,1000);
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0x88>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fd3b 	bl	8003014 <xQueueSemaphoreTake>

   xTaskCreate(HPT_Task, "HPT", 128, NULL, 3, &HPT_Handler);
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <main+0x94>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2303      	movs	r3, #3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	4911      	ldr	r1, [pc, #68]	; (80005f0 <main+0x98>)
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <main+0x9c>)
 80005ae:	f002 ff9c 	bl	80034ea <xTaskCreate>
   xTaskCreate(MPT_Task, "MPT", 128, NULL, 2, &MPT_Handler);
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <main+0xa0>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	490f      	ldr	r1, [pc, #60]	; (80005fc <main+0xa4>)
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <main+0xa8>)
 80005c2:	f002 ff92 	bl	80034ea <xTaskCreate>
   xTaskCreate(LPT_Task, "LPT", 128, NULL, 1, &LPT_Handler);
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0xac>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <main+0xb0>)
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <main+0xb4>)
 80005d6:	f002 ff88 	bl	80034ea <xTaskCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80005da:	f003 f8f1 	bl	80037c0 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x86>
 80005e0:	200002c4 	.word	0x200002c4
 80005e4:	08004c78 	.word	0x08004c78
 80005e8:	20000280 	.word	0x20000280
 80005ec:	200002c8 	.word	0x200002c8
 80005f0:	08004c88 	.word	0x08004c88
 80005f4:	0800081d 	.word	0x0800081d
 80005f8:	200002cc 	.word	0x200002cc
 80005fc:	08004c8c 	.word	0x08004c8c
 8000600:	08000881 	.word	0x08000881
 8000604:	200002d0 	.word	0x200002d0
 8000608:	08004c90 	.word	0x08004c90
 800060c:	080008e5 	.word	0x080008e5

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fb16 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a29      	ldr	r2, [pc, #164]	; (80006e4 <SystemClock_Config+0xd4>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemClock_Config+0xd8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xd8>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f904 	bl	80018ac <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 f95f 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd72 	bl	80011b4 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d6:	f000 f949 	bl	800096c <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 fe0e 	bl	8002344 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f91d 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000280 	.word	0x20000280
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a25      	ldr	r2, [pc, #148]	; (8000810 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <MX_GPIO_Init+0xd4>)
 80007cc:	f000 fcd8 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_GPIO_Init+0xd8>)
 80007e8:	f000 fb36 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ec:	2320      	movs	r3, #32
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0xd4>)
 8000804:	f000 fb28 	bl	8000e58 <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020800 	.word	0x40020800

0800081c <HPT_Task>:

/* USER CODE BEGIN 4 */
void HPT_Task(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	//char *str = "HPT Mutex Created\n";
	for(;;)
	{

		char *str1 = "HPT Task Entered Mutex\n";
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HPT_Task+0x54>)
 8000826:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), HAL_MAX_DELAY);
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fcf1 	bl	8000210 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	480e      	ldr	r0, [pc, #56]	; (8000874 <HPT_Task+0x58>)
 800083a:	f001 fdd0 	bl	80023de <HAL_UART_Transmit>
		//send_uart(str);
		char *str2 = "HPT Task Leaving Mutex\n";
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HPT_Task+0x5c>)
 8000840:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 8000842:	68b8      	ldr	r0, [r7, #8]
 8000844:	f7ff fce4 	bl	8000210 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <HPT_Task+0x58>)
 8000854:	f001 fdc3 	bl	80023de <HAL_UART_Transmit>
		xSemaphoreGive(SimpleMutex);
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HPT_Task+0x60>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	2300      	movs	r3, #0
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	f002 fad9 	bl	8002e18 <xQueueGenericSend>
		vTaskDelay(1000);
 8000866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086a:	f002 ff75 	bl	8003758 <vTaskDelay>
	{
 800086e:	e7d9      	b.n	8000824 <HPT_Task+0x8>
 8000870:	08004c94 	.word	0x08004c94
 8000874:	20000280 	.word	0x20000280
 8000878:	08004cac 	.word	0x08004cac
 800087c:	200002c4 	.word	0x200002c4

08000880 <MPT_Task>:
	}
}
void MPT_Task(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	//char *str = "MPT Mutex Created\n";
		for(;;)
		{

			char *str1 = "MPT Task Entered Mutex\n";
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MPT_Task+0x54>)
 800088a:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), HAL_MAX_DELAY);
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f7ff fcbf 	bl	8000210 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MPT_Task+0x58>)
 800089e:	f001 fd9e 	bl	80023de <HAL_UART_Transmit>
			//send_uart(str);
			char *str2 = "MPT Task Leaving Mutex\n";
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MPT_Task+0x5c>)
 80008a4:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f7ff fcb2 	bl	8000210 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MPT_Task+0x58>)
 80008b8:	f001 fd91 	bl	80023de <HAL_UART_Transmit>
			xSemaphoreGive(SimpleMutex);
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MPT_Task+0x60>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	2300      	movs	r3, #0
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	f002 faa7 	bl	8002e18 <xQueueGenericSend>
			vTaskDelay(2000);		}
 80008ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ce:	f002 ff43 	bl	8003758 <vTaskDelay>
		{
 80008d2:	e7d9      	b.n	8000888 <MPT_Task+0x8>
 80008d4:	08004cc4 	.word	0x08004cc4
 80008d8:	20000280 	.word	0x20000280
 80008dc:	08004cdc 	.word	0x08004cdc
 80008e0:	200002c4 	.word	0x200002c4

080008e4 <LPT_Task>:
}
void LPT_Task(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	//char *str = "LPT Mutex Created\n";
			for(;;)
			{
				//xSemaphoreGive(BinSemaphore);
				char *str1 = "LPT Task Entered Mutex\n";
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <LPT_Task+0x54>)
 80008ee:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen(str1), HAL_MAX_DELAY);
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f7ff fc8d 	bl	8000210 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	68f9      	ldr	r1, [r7, #12]
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <LPT_Task+0x58>)
 8000902:	f001 fd6c 	bl	80023de <HAL_UART_Transmit>
				//send_uart(str);
				char *str2 = "LPT Task Leaving Mutex\n";
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <LPT_Task+0x5c>)
 8000908:	60bb      	str	r3, [r7, #8]
				HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen(str2), HAL_MAX_DELAY);
 800090a:	68b8      	ldr	r0, [r7, #8]
 800090c:	f7ff fc80 	bl	8000210 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <LPT_Task+0x58>)
 800091c:	f001 fd5f 	bl	80023de <HAL_UART_Transmit>
				xSemaphoreGive(SimpleMutex);
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <LPT_Task+0x60>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	f002 fa75 	bl	8002e18 <xQueueGenericSend>
				vTaskDelay(3000);
 800092e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000932:	f002 ff11 	bl	8003758 <vTaskDelay>
			{
 8000936:	e7d9      	b.n	80008ec <LPT_Task+0x8>
 8000938:	08004cf4 	.word	0x08004cf4
 800093c:	20000280 	.word	0x20000280
 8000940:	08004d0c 	.word	0x08004d0c
 8000944:	200002c4 	.word	0x200002c4

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f97b 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40001000 	.word	0x40001000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_MspInit+0x54>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a11      	ldr	r2, [pc, #68]	; (80009cc <HAL_MspInit+0x54>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_MspInit+0x54>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_MspInit+0x54>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	210f      	movs	r1, #15
 80009ba:	f06f 0001 	mvn.w	r0, #1
 80009be:	f000 fa21 	bl	8000e04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_UART_MspInit+0x84>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d12b      	bne.n	8000a4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_UART_MspInit+0x88>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_UART_MspInit+0x88>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_UART_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <HAL_UART_MspInit+0x88>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_UART_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_UART_MspInit+0x8c>)
 8000a46:	f000 fa07 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <HAL_InitTick+0xe4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a32      	ldr	r2, [pc, #200]	; (8000b44 <HAL_InitTick+0xe4>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_InitTick+0xe4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 0310 	and.w	r3, r3, #16
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a8c:	f107 0210 	add.w	r2, r7, #16
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fca6 	bl	80013e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa6:	f000 fc77 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	6378      	str	r0, [r7, #52]	; 0x34
 8000aac:	e004      	b.n	8000ab8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aae:	f000 fc73 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_InitTick+0xe8>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	0c9b      	lsrs	r3, r3, #18
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <HAL_InitTick+0xec>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <HAL_InitTick+0xf0>)
 8000aca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_InitTick+0xec>)
 8000ace:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_InitTick+0xec>)
 8000ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_InitTick+0xec>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_InitTick+0xec>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_InitTick+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aec:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_InitTick+0xec>)
 8000aee:	f001 f97b 	bl	8001de8 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11b      	bne.n	8000b38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b00:	4812      	ldr	r0, [pc, #72]	; (8000b4c <HAL_InitTick+0xec>)
 8000b02:	f001 f9cb 	bl	8001e9c <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d111      	bne.n	8000b38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b14:	2036      	movs	r0, #54	; 0x36
 8000b16:	f000 f991 	bl	8000e3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d808      	bhi.n	8000b32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2036      	movs	r0, #54	; 0x36
 8000b26:	f000 f96d 	bl	8000e04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_InitTick+0xf4>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e002      	b.n	8000b38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3738      	adds	r7, #56	; 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	431bde83 	.word	0x431bde83
 8000b4c:	200002d4 	.word	0x200002d4
 8000b50:	40001000 	.word	0x40001000
 8000b54:	20000004 	.word	0x20000004

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM6_DAC_IRQHandler+0x10>)
 8000b8a:	f001 f9f7 	bl	8001f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200002d4 	.word	0x200002d4

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 ffff 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fcb3 	bl	8000558 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c00:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8000c04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c08:	20004074 	.word	0x20004074

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8d8 	bl	8000dee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f7ff ff0e 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe98 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	2000031c 	.word	0x2000031c

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2000031c 	.word	0x2000031c

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ff4c 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e16:	f7ff ff61 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6978      	ldr	r0, [r7, #20]
 8000e22:	f7ff ffb1 	bl	8000d88 <NVIC_EncodePriority>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff80 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff54 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e165      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8154 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d130      	bne.n	8000f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	f003 0201 	and.w	r2, r3, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d017      	beq.n	8000f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ae 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_GPIO_Init+0x304>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x308>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x30c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x310>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x314>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x318>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x20a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x31c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x206>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x202>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x304>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_GPIO_Init+0x324>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b6:	4a31      	ldr	r2, [pc, #196]	; (800117c <HAL_GPIO_Init+0x324>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <HAL_GPIO_Init+0x324>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_GPIO_Init+0x324>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110a:	4a1c      	ldr	r2, [pc, #112]	; (800117c <HAL_GPIO_Init+0x324>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_GPIO_Init+0x324>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_GPIO_Init+0x324>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae96 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0cc      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c8:	4b68      	ldr	r3, [pc, #416]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d90c      	bls.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b65      	ldr	r3, [pc, #404]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0b8      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800122a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	494d      	ldr	r1, [pc, #308]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d044      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d119      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	2b03      	cmp	r3, #3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e067      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f023 0203 	bic.w	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4934      	ldr	r1, [pc, #208]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a4:	f7ff fcea 	bl	8000c7c <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff fce6 	bl	8000c7c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e04f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 020c 	and.w	r2, r3, #12
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d1eb      	bne.n	80012ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d20c      	bcs.n	80012fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e032      	b.n	8001362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800133a:	f000 f887 	bl	800144c <HAL_RCC_GetSysClockFreq>
 800133e:	4602      	mov	r2, r0
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	490a      	ldr	r1, [pc, #40]	; (8001374 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	5ccb      	ldrb	r3, [r1, r3]
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fb80 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00
 8001370:	40023800 	.word	0x40023800
 8001374:	08004d2c 	.word	0x08004d2c
 8001378:	20000000 	.word	0x20000000
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_RCC_GetHCLKFreq+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000000 	.word	0x20000000

08001398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800139c:	f7ff fff0 	bl	8001380 <HAL_RCC_GetHCLKFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4903      	ldr	r1, [pc, #12]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08004d3c 	.word	0x08004d3c

080013c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013c4:	f7ff ffdc 	bl	8001380 <HAL_RCC_GetHCLKFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	0b5b      	lsrs	r3, r3, #13
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4903      	ldr	r1, [pc, #12]	; (80013e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	08004d3c 	.word	0x08004d3c

080013e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	220f      	movs	r2, #15
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_RCC_GetClockConfig+0x5c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_GetClockConfig+0x5c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_RCC_GetClockConfig+0x60>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 020f 	and.w	r2, r3, #15
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001450:	b0ae      	sub	sp, #184	; 0xb8
 8001452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001472:	4bcb      	ldr	r3, [pc, #812]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b0c      	cmp	r3, #12
 800147c:	f200 8206 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x440>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014bd 	.word	0x080014bd
 800148c:	0800188d 	.word	0x0800188d
 8001490:	0800188d 	.word	0x0800188d
 8001494:	0800188d 	.word	0x0800188d
 8001498:	080014c5 	.word	0x080014c5
 800149c:	0800188d 	.word	0x0800188d
 80014a0:	0800188d 	.word	0x0800188d
 80014a4:	0800188d 	.word	0x0800188d
 80014a8:	080014cd 	.word	0x080014cd
 80014ac:	0800188d 	.word	0x0800188d
 80014b0:	0800188d 	.word	0x0800188d
 80014b4:	0800188d 	.word	0x0800188d
 80014b8:	080016bd 	.word	0x080016bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4bb9      	ldr	r3, [pc, #740]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014c2:	e1e7      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014c4:	4bb8      	ldr	r3, [pc, #736]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014ca:	e1e3      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014cc:	4bb4      	ldr	r3, [pc, #720]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d8:	4bb1      	ldr	r3, [pc, #708]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d071      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	4bae      	ldr	r3, [pc, #696]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80014f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80014f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800150a:	4622      	mov	r2, r4
 800150c:	462b      	mov	r3, r5
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0159      	lsls	r1, r3, #5
 8001518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800151c:	0150      	lsls	r0, r2, #5
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4621      	mov	r1, r4
 8001524:	1a51      	subs	r1, r2, r1
 8001526:	6439      	str	r1, [r7, #64]	; 0x40
 8001528:	4629      	mov	r1, r5
 800152a:	eb63 0301 	sbc.w	r3, r3, r1
 800152e:	647b      	str	r3, [r7, #68]	; 0x44
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 0300 	mov.w	r3, #0
 8001538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800153c:	4649      	mov	r1, r9
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	4641      	mov	r1, r8
 8001542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001546:	4641      	mov	r1, r8
 8001548:	018a      	lsls	r2, r1, #6
 800154a:	4641      	mov	r1, r8
 800154c:	1a51      	subs	r1, r2, r1
 800154e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001550:	4649      	mov	r1, r9
 8001552:	eb63 0301 	sbc.w	r3, r3, r1
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001564:	4649      	mov	r1, r9
 8001566:	00cb      	lsls	r3, r1, #3
 8001568:	4641      	mov	r1, r8
 800156a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800156e:	4641      	mov	r1, r8
 8001570:	00ca      	lsls	r2, r1, #3
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	4603      	mov	r3, r0
 8001578:	4622      	mov	r2, r4
 800157a:	189b      	adds	r3, r3, r2
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
 800157e:	462b      	mov	r3, r5
 8001580:	460a      	mov	r2, r1
 8001582:	eb42 0303 	adc.w	r3, r2, r3
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001594:	4629      	mov	r1, r5
 8001596:	024b      	lsls	r3, r1, #9
 8001598:	4621      	mov	r1, r4
 800159a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800159e:	4621      	mov	r1, r4
 80015a0:	024a      	lsls	r2, r1, #9
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015b8:	f7fe fe32 	bl	8000220 <__aeabi_uldivmod>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4613      	mov	r3, r2
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015c6:	e067      	b.n	8001698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4b75      	ldr	r3, [pc, #468]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80015e2:	2300      	movs	r3, #0
 80015e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80015e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	0159      	lsls	r1, r3, #5
 80015f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fc:	0150      	lsls	r0, r2, #5
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4621      	mov	r1, r4
 8001604:	1a51      	subs	r1, r2, r1
 8001606:	62b9      	str	r1, [r7, #40]	; 0x28
 8001608:	4629      	mov	r1, r5
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800161c:	4649      	mov	r1, r9
 800161e:	018b      	lsls	r3, r1, #6
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001626:	4641      	mov	r1, r8
 8001628:	018a      	lsls	r2, r1, #6
 800162a:	4641      	mov	r1, r8
 800162c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001630:	4649      	mov	r1, r9
 8001632:	eb63 0b01 	sbc.w	fp, r3, r1
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800164a:	4692      	mov	sl, r2
 800164c:	469b      	mov	fp, r3
 800164e:	4623      	mov	r3, r4
 8001650:	eb1a 0303 	adds.w	r3, sl, r3
 8001654:	623b      	str	r3, [r7, #32]
 8001656:	462b      	mov	r3, r5
 8001658:	eb4b 0303 	adc.w	r3, fp, r3
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800166a:	4629      	mov	r1, r5
 800166c:	028b      	lsls	r3, r1, #10
 800166e:	4621      	mov	r1, r4
 8001670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001674:	4621      	mov	r1, r4
 8001676:	028a      	lsls	r2, r1, #10
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001680:	2200      	movs	r2, #0
 8001682:	673b      	str	r3, [r7, #112]	; 0x70
 8001684:	677a      	str	r2, [r7, #116]	; 0x74
 8001686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800168a:	f7fe fdc9 	bl	8000220 <__aeabi_uldivmod>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4613      	mov	r3, r2
 8001694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	3301      	adds	r3, #1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ba:	e0eb      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d06b      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	2300      	movs	r3, #0
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
 80016ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f0:	4622      	mov	r2, r4
 80016f2:	462b      	mov	r3, r5
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	0159      	lsls	r1, r3, #5
 80016fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001702:	0150      	lsls	r0, r2, #5
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4621      	mov	r1, r4
 800170a:	1a51      	subs	r1, r2, r1
 800170c:	61b9      	str	r1, [r7, #24]
 800170e:	4629      	mov	r1, r5
 8001710:	eb63 0301 	sbc.w	r3, r3, r1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001722:	4659      	mov	r1, fp
 8001724:	018b      	lsls	r3, r1, #6
 8001726:	4651      	mov	r1, sl
 8001728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172c:	4651      	mov	r1, sl
 800172e:	018a      	lsls	r2, r1, #6
 8001730:	4651      	mov	r1, sl
 8001732:	ebb2 0801 	subs.w	r8, r2, r1
 8001736:	4659      	mov	r1, fp
 8001738:	eb63 0901 	sbc.w	r9, r3, r1
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800174c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001750:	4690      	mov	r8, r2
 8001752:	4699      	mov	r9, r3
 8001754:	4623      	mov	r3, r4
 8001756:	eb18 0303 	adds.w	r3, r8, r3
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	462b      	mov	r3, r5
 800175e:	eb49 0303 	adc.w	r3, r9, r3
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001770:	4629      	mov	r1, r5
 8001772:	024b      	lsls	r3, r1, #9
 8001774:	4621      	mov	r1, r4
 8001776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800177a:	4621      	mov	r1, r4
 800177c:	024a      	lsls	r2, r1, #9
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001786:	2200      	movs	r2, #0
 8001788:	65bb      	str	r3, [r7, #88]	; 0x58
 800178a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800178c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001790:	f7fe fd46 	bl	8000220 <__aeabi_uldivmod>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4613      	mov	r3, r2
 800179a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800179e:	e065      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x420>
 80017a0:	40023800 	.word	0x40023800
 80017a4:	00f42400 	.word	0x00f42400
 80017a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	099b      	lsrs	r3, r3, #6
 80017b2:	2200      	movs	r2, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	4611      	mov	r1, r2
 80017b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50
 80017be:	2300      	movs	r3, #0
 80017c0:	657b      	str	r3, [r7, #84]	; 0x54
 80017c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017c6:	4642      	mov	r2, r8
 80017c8:	464b      	mov	r3, r9
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	f04f 0100 	mov.w	r1, #0
 80017d2:	0159      	lsls	r1, r3, #5
 80017d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d8:	0150      	lsls	r0, r2, #5
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4641      	mov	r1, r8
 80017e0:	1a51      	subs	r1, r2, r1
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	4649      	mov	r1, r9
 80017e6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017f8:	4659      	mov	r1, fp
 80017fa:	018b      	lsls	r3, r1, #6
 80017fc:	4651      	mov	r1, sl
 80017fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001802:	4651      	mov	r1, sl
 8001804:	018a      	lsls	r2, r1, #6
 8001806:	4651      	mov	r1, sl
 8001808:	1a54      	subs	r4, r2, r1
 800180a:	4659      	mov	r1, fp
 800180c:	eb63 0501 	sbc.w	r5, r3, r1
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	00eb      	lsls	r3, r5, #3
 800181a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800181e:	00e2      	lsls	r2, r4, #3
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	4643      	mov	r3, r8
 8001826:	18e3      	adds	r3, r4, r3
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	464b      	mov	r3, r9
 800182c:	eb45 0303 	adc.w	r3, r5, r3
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800183e:	4629      	mov	r1, r5
 8001840:	028b      	lsls	r3, r1, #10
 8001842:	4621      	mov	r1, r4
 8001844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001848:	4621      	mov	r1, r4
 800184a:	028a      	lsls	r2, r1, #10
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001854:	2200      	movs	r2, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
 8001858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800185a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800185e:	f7fe fcdf 	bl	8000220 <__aeabi_uldivmod>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4613      	mov	r3, r2
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0f1b      	lsrs	r3, r3, #28
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800187a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800187e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800188a:	e003      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001898:	4618      	mov	r0, r3
 800189a:	37b8      	adds	r7, #184	; 0xb8
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400

080018ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e28d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8083 	beq.w	80019d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018cc:	4b94      	ldr	r3, [pc, #592]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d019      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018d8:	4b91      	ldr	r3, [pc, #580]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e4:	4b8e      	ldr	r3, [pc, #568]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f0:	d00c      	beq.n	800190c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190a:	d10b      	bne.n	8001924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d05b      	beq.n	80019d0 <HAL_RCC_OscConfig+0x124>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d157      	bne.n	80019d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e25a      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x90>
 800192e:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a7b      	ldr	r2, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e01d      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0xb4>
 8001946:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0xcc>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6b      	ldr	r2, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff f97c 	bl	8000c7c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff f978 	bl	8000c7c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	; 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e21f      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0xdc>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f968 	bl	8000c7c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f964 	bl	8000c7c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20b      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x104>
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d06f      	beq.n	8001abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d017      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d11c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d116      	bne.n	8001a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1d3      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a46:	e03a      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a56:	f7ff f911 	bl	8000c7c <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f90d 	bl	8000c7c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1b4      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4925      	ldr	r1, [pc, #148]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e015      	b.n	8001abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8f0 	bl	8000c7c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f8ec 	bl	8000c7c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e193      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d036      	beq.n	8001b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d016      	beq.n	8001b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f8d0 	bl	8000c7c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f8cc 	bl	8000c7c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e173      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 8001af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x234>
 8001afe:	e01b      	b.n	8001b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b06:	f7ff f8b9 	bl	8000c7c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	e00e      	b.n	8001b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f8b5 	bl	8000c7c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d907      	bls.n	8001b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e15c      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470000 	.word	0x42470000
 8001b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b8a      	ldr	r3, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1ea      	bne.n	8001b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8097 	beq.w	8001c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b83      	ldr	r3, [pc, #524]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b7f      	ldr	r3, [pc, #508]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a7e      	ldr	r2, [pc, #504]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f875 	bl	8000c7c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff f871 	bl	8000c7c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e118      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x4b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x31e>
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc0:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x340>
 8001bd2:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a60      	ldr	r2, [pc, #384]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bde:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001bec:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a59      	ldr	r2, [pc, #356]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 0304 	bic.w	r3, r3, #4
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d015      	beq.n	8001c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f836 	bl	8000c7c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f832 	bl	8000c7c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0d7      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0ee      	beq.n	8001c14 <HAL_RCC_OscConfig+0x368>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f820 	bl	8000c7c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f81c 	bl	8000c7c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0c1      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ee      	bne.n	8001c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d105      	bne.n	8001c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80ad 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d145      	bne.n	8001d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7fe fff0 	bl	8000c7c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe ffec 	bl	8000c7c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e093      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	071b      	lsls	r3, r3, #28
 8001cea:	491b      	ldr	r1, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7fe ffc1 	bl	8000c7c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7fe ffbd 	bl	8000c7c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e064      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x452>
 8001d1c:	e05c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x4b4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7fe ffaa 	bl	8000c7c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7fe ffa6 	bl	8000c7c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e04d      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x480>
 8001d4a:	e045      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e040      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <HAL_RCC_OscConfig+0x538>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d030      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d129      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d122      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d94:	4013      	ands	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d119      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10f      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e041      	b.n	8001e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f839 	bl	8001e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3304      	adds	r3, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f000 f9d8 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d001      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e04e      	b.n	8001f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d022      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ede:	d01d      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d018      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00e      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d111      	bne.n	8001f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d010      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3e:	e007      	b.n	8001f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40010400 	.word	0x40010400
 8001f74:	40014000 	.word	0x40014000
 8001f78:	40001800 	.word	0x40001800

08001f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8ee 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8e0 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8f1 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0204 	mvn.w	r2, #4
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8c4 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8b6 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f8c7 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d122      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b08      	cmp	r3, #8
 8002046:	d11b      	bne.n	8002080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0208 	mvn.w	r2, #8
 8002050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2204      	movs	r2, #4
 8002056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f89a 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 800206c:	e005      	b.n	800207a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f88c 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f89d 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b10      	cmp	r3, #16
 800208c:	d122      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	d11b      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2208      	movs	r2, #8
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f870 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f862 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f873 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0201 	mvn.w	r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fc24 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f902 	bl	8002330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f838 	bl	80021c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b20      	cmp	r3, #32
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b20      	cmp	r3, #32
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8cc 	bl	800231c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <TIM_Base_SetConfig+0x114>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d00f      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3d      	ldr	r2, [pc, #244]	; (80022f4 <TIM_Base_SetConfig+0x118>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00b      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <TIM_Base_SetConfig+0x11c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <TIM_Base_SetConfig+0x120>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <TIM_Base_SetConfig+0x124>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <TIM_Base_SetConfig+0x114>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d027      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <TIM_Base_SetConfig+0x118>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d023      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <TIM_Base_SetConfig+0x11c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <TIM_Base_SetConfig+0x120>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <TIM_Base_SetConfig+0x124>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d017      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a28      	ldr	r2, [pc, #160]	; (8002304 <TIM_Base_SetConfig+0x128>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a27      	ldr	r2, [pc, #156]	; (8002308 <TIM_Base_SetConfig+0x12c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <TIM_Base_SetConfig+0x130>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <TIM_Base_SetConfig+0x134>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <TIM_Base_SetConfig+0x138>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <TIM_Base_SetConfig+0x13c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <TIM_Base_SetConfig+0x114>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0xf8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <TIM_Base_SetConfig+0x124>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	615a      	str	r2, [r3, #20]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	40010400 	.word	0x40010400
 8002304:	40014000 	.word	0x40014000
 8002308:	40014400 	.word	0x40014400
 800230c:	40014800 	.word	0x40014800
 8002310:	40001800 	.word	0x40001800
 8002314:	40001c00 	.word	0x40001c00
 8002318:	40002000 	.word	0x40002000

0800231c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e03f      	b.n	80023d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fb30 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f929 	bl	80025e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b08a      	sub	sp, #40	; 0x28
 80023e2:	af02      	add	r7, sp, #8
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d17c      	bne.n	80024f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_UART_Transmit+0x2c>
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e075      	b.n	80024fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_UART_Transmit+0x3e>
 8002418:	2302      	movs	r3, #2
 800241a:	e06e      	b.n	80024fa <HAL_UART_Transmit+0x11c>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2221      	movs	r2, #33	; 0x21
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002432:	f7fe fc23 	bl	8000c7c <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244c:	d108      	bne.n	8002460 <HAL_UART_Transmit+0x82>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d104      	bne.n	8002460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e003      	b.n	8002468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002470:	e02a      	b.n	80024c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f840 	bl	8002502 <UART_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e036      	b.n	80024fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	3302      	adds	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e007      	b.n	80024ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1cf      	bne.n	8002472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f810 	bl	8002502 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e006      	b.n	80024fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b090      	sub	sp, #64	; 0x40
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002512:	e050      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d04c      	beq.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800251c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0x30>
 8002522:	f7fe fbab 	bl	8000c7c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800252e:	429a      	cmp	r2, r3
 8002530:	d241      	bcs.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002552:	637a      	str	r2, [r7, #52]	; 0x34
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e5      	bne.n	8002532 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	613b      	str	r3, [r7, #16]
   return(result);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002586:	623a      	str	r2, [r7, #32]
 8002588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258a:	69f9      	ldr	r1, [r7, #28]
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	e841 2300 	strex	r3, r2, [r1]
 8002592:	61bb      	str	r3, [r7, #24]
   return(result);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1e5      	bne.n	8002566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d09f      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3740      	adds	r7, #64	; 0x40
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b0c0      	sub	sp, #256	; 0x100
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	ea40 0301 	orr.w	r3, r0, r1
 8002608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	431a      	orrs	r2, r3
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002638:	f021 010c 	bic.w	r1, r1, #12
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002646:	430b      	orrs	r3, r1
 8002648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265a:	6999      	ldr	r1, [r3, #24]
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	ea40 0301 	orr.w	r3, r0, r1
 8002666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <UART_SetConfig+0x2cc>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d005      	beq.n	8002680 <UART_SetConfig+0xa0>
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <UART_SetConfig+0x2d0>)
 800267c:	429a      	cmp	r2, r3
 800267e:	d104      	bne.n	800268a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002680:	f7fe fe9e 	bl	80013c0 <HAL_RCC_GetPCLK2Freq>
 8002684:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002688:	e003      	b.n	8002692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800268a:	f7fe fe85 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 800268e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269c:	f040 810c 	bne.w	80028b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	1891      	adds	r1, r2, r2
 80026b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80026ba:	415b      	adcs	r3, r3
 80026bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026c2:	4621      	mov	r1, r4
 80026c4:	eb12 0801 	adds.w	r8, r2, r1
 80026c8:	4629      	mov	r1, r5
 80026ca:	eb43 0901 	adc.w	r9, r3, r1
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	4623      	mov	r3, r4
 80026e8:	eb18 0303 	adds.w	r3, r8, r3
 80026ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026f0:	462b      	mov	r3, r5
 80026f2:	eb49 0303 	adc.w	r3, r9, r3
 80026f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002706:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800270a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800270e:	460b      	mov	r3, r1
 8002710:	18db      	adds	r3, r3, r3
 8002712:	653b      	str	r3, [r7, #80]	; 0x50
 8002714:	4613      	mov	r3, r2
 8002716:	eb42 0303 	adc.w	r3, r2, r3
 800271a:	657b      	str	r3, [r7, #84]	; 0x54
 800271c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002724:	f7fd fd7c 	bl	8000220 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <UART_SetConfig+0x2d4>)
 800272e:	fba3 2302 	umull	r2, r3, r3, r2
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	011c      	lsls	r4, r3, #4
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002740:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002748:	4642      	mov	r2, r8
 800274a:	464b      	mov	r3, r9
 800274c:	1891      	adds	r1, r2, r2
 800274e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002750:	415b      	adcs	r3, r3
 8002752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002758:	4641      	mov	r1, r8
 800275a:	eb12 0a01 	adds.w	sl, r2, r1
 800275e:	4649      	mov	r1, r9
 8002760:	eb43 0b01 	adc.w	fp, r3, r1
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002778:	4692      	mov	sl, r2
 800277a:	469b      	mov	fp, r3
 800277c:	4643      	mov	r3, r8
 800277e:	eb1a 0303 	adds.w	r3, sl, r3
 8002782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002786:	464b      	mov	r3, r9
 8002788:	eb4b 0303 	adc.w	r3, fp, r3
 800278c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800279c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027a4:	460b      	mov	r3, r1
 80027a6:	18db      	adds	r3, r3, r3
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
 80027aa:	4613      	mov	r3, r2
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
 80027b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027ba:	f7fd fd31 	bl	8000220 <__aeabi_uldivmod>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <UART_SetConfig+0x2d4>)
 80027c6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2264      	movs	r2, #100	; 0x64
 80027ce:	fb02 f303 	mul.w	r3, r2, r3
 80027d2:	1acb      	subs	r3, r1, r3
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <UART_SetConfig+0x2d4>)
 80027dc:	fba3 2302 	umull	r2, r3, r3, r2
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027e8:	441c      	add	r4, r3
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	63b9      	str	r1, [r7, #56]	; 0x38
 8002804:	415b      	adcs	r3, r3
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800280c:	4641      	mov	r1, r8
 800280e:	1851      	adds	r1, r2, r1
 8002810:	6339      	str	r1, [r7, #48]	; 0x30
 8002812:	4649      	mov	r1, r9
 8002814:	414b      	adcs	r3, r1
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002824:	4659      	mov	r1, fp
 8002826:	00cb      	lsls	r3, r1, #3
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282e:	4651      	mov	r1, sl
 8002830:	00ca      	lsls	r2, r1, #3
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	4603      	mov	r3, r0
 8002838:	4642      	mov	r2, r8
 800283a:	189b      	adds	r3, r3, r2
 800283c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002840:	464b      	mov	r3, r9
 8002842:	460a      	mov	r2, r1
 8002844:	eb42 0303 	adc.w	r3, r2, r3
 8002848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002858:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800285c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002860:	460b      	mov	r3, r1
 8002862:	18db      	adds	r3, r3, r3
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
 8002866:	4613      	mov	r3, r2
 8002868:	eb42 0303 	adc.w	r3, r2, r3
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002876:	f7fd fcd3 	bl	8000220 <__aeabi_uldivmod>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <UART_SetConfig+0x2d4>)
 8002880:	fba3 1302 	umull	r1, r3, r3, r2
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	2164      	movs	r1, #100	; 0x64
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	3332      	adds	r3, #50	; 0x32
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <UART_SetConfig+0x2d4>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	f003 0207 	and.w	r2, r3, #7
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4422      	add	r2, r4
 80028a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028a8:	e105      	b.n	8002ab6 <UART_SetConfig+0x4d6>
 80028aa:	bf00      	nop
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40011400 	.word	0x40011400
 80028b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028bc:	2200      	movs	r2, #0
 80028be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028ca:	4642      	mov	r2, r8
 80028cc:	464b      	mov	r3, r9
 80028ce:	1891      	adds	r1, r2, r2
 80028d0:	6239      	str	r1, [r7, #32]
 80028d2:	415b      	adcs	r3, r3
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028da:	4641      	mov	r1, r8
 80028dc:	1854      	adds	r4, r2, r1
 80028de:	4649      	mov	r1, r9
 80028e0:	eb43 0501 	adc.w	r5, r3, r1
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	00eb      	lsls	r3, r5, #3
 80028ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f2:	00e2      	lsls	r2, r4, #3
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	4643      	mov	r3, r8
 80028fa:	18e3      	adds	r3, r4, r3
 80028fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002900:	464b      	mov	r3, r9
 8002902:	eb45 0303 	adc.w	r3, r5, r3
 8002906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800290a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002926:	4629      	mov	r1, r5
 8002928:	008b      	lsls	r3, r1, #2
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002930:	4621      	mov	r1, r4
 8002932:	008a      	lsls	r2, r1, #2
 8002934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002938:	f7fd fc72 	bl	8000220 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <UART_SetConfig+0x4e4>)
 8002942:	fba3 2302 	umull	r2, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	011c      	lsls	r4, r3, #4
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	61b9      	str	r1, [r7, #24]
 8002964:	415b      	adcs	r3, r3
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6139      	str	r1, [r7, #16]
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029c4:	4649      	mov	r1, r9
 80029c6:	008b      	lsls	r3, r1, #2
 80029c8:	4641      	mov	r1, r8
 80029ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ce:	4641      	mov	r1, r8
 80029d0:	008a      	lsls	r2, r1, #2
 80029d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029d6:	f7fd fc23 	bl	8000220 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <UART_SetConfig+0x4e4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a34      	ldr	r2, [pc, #208]	; (8002ac4 <UART_SetConfig+0x4e4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fe:	441c      	add	r4, r3
 8002a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a04:	2200      	movs	r2, #0
 8002a06:	673b      	str	r3, [r7, #112]	; 0x70
 8002a08:	677a      	str	r2, [r7, #116]	; 0x74
 8002a0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a0e:	4642      	mov	r2, r8
 8002a10:	464b      	mov	r3, r9
 8002a12:	1891      	adds	r1, r2, r2
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	415b      	adcs	r3, r3
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a1e:	4641      	mov	r1, r8
 8002a20:	1851      	adds	r1, r2, r1
 8002a22:	6039      	str	r1, [r7, #0]
 8002a24:	4649      	mov	r1, r9
 8002a26:	414b      	adcs	r3, r1
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a36:	4659      	mov	r1, fp
 8002a38:	00cb      	lsls	r3, r1, #3
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a40:	4651      	mov	r1, sl
 8002a42:	00ca      	lsls	r2, r1, #3
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4642      	mov	r2, r8
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a50:	464b      	mov	r3, r9
 8002a52:	460a      	mov	r2, r1
 8002a54:	eb42 0303 	adc.w	r3, r2, r3
 8002a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
 8002a64:	667a      	str	r2, [r7, #100]	; 0x64
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a72:	4649      	mov	r1, r9
 8002a74:	008b      	lsls	r3, r1, #2
 8002a76:	4641      	mov	r1, r8
 8002a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	008a      	lsls	r2, r1, #2
 8002a80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a84:	f7fd fbcc 	bl	8000220 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <UART_SetConfig+0x4e4>)
 8002a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2164      	movs	r1, #100	; 0x64
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	3332      	adds	r3, #50	; 0x32
 8002aa0:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <UART_SetConfig+0x4e4>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4422      	add	r2, r4
 8002ab4:	609a      	str	r2, [r3, #8]
}
 8002ab6:	bf00      	nop
 8002ab8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac2:	bf00      	nop
 8002ac4:	51eb851f 	.word	0x51eb851f

08002ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f103 0208 	add.w	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 0208 	add.w	r2, r3, #8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f103 0208 	add.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d103      	bne.n	8002b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e00c      	b.n	8002ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e002      	b.n	8002b98 <vListInsert+0x2e>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d2f6      	bcs.n	8002b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	601a      	str	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6892      	ldr	r2, [r2, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6852      	ldr	r2, [r2, #4]
 8002bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d103      	bne.n	8002c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c5a:	f001 fcfb 	bl	8004654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	68f9      	ldr	r1, [r7, #12]
 8002c8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d114      	bne.n	8002cda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01a      	beq.n	8002cee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3310      	adds	r3, #16
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 ffc1 	bl	8003c44 <xTaskRemoveFromEventList>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <xQueueGenericReset+0xcc>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	e009      	b.n	8002cee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3310      	adds	r3, #16
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fef2 	bl	8002ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3324      	adds	r3, #36	; 0x24
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff feed 	bl	8002ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cee:	f001 fce1 	bl	80046b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	613b      	str	r3, [r7, #16]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3348      	adds	r3, #72	; 0x48
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fd6d 	bl	8004818 <pvPortMalloc>
 8002d3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3348      	adds	r3, #72	; 0x48
 8002d4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f805 	bl	8002d74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e002      	b.n	8002d96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002da2:	2101      	movs	r1, #1
 8002da4:	69b8      	ldr	r0, [r7, #24]
 8002da6:	f7ff ff43 	bl	8002c30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f81d 	bl	8002e18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002df0:	2301      	movs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff7e 	bl	8002d00 <xQueueGenericCreate>
 8002e04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ffd3 	bl	8002db2 <prvInitialiseMutex>

		return xNewQueue;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
	}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08e      	sub	sp, #56	; 0x38
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e26:	2300      	movs	r3, #0
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericSend+0x32>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSend+0x40>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGenericSend+0x44>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGenericSend+0x46>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueGenericSend+0x60>
	__asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d103      	bne.n	8002e86 <xQueueGenericSend+0x6e>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <xQueueGenericSend+0x72>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGenericSend+0x74>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	623b      	str	r3, [r7, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 f889 	bl	8003fbc <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueGenericSend+0x9e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueGenericSend+0xa2>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueGenericSend+0xa4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61fb      	str	r3, [r7, #28]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed6:	f001 fbbd 	bl	8004654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <xQueueGenericSend+0xd4>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d129      	bne.n	8002f40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef2:	f000 f9b3 	bl	800325c <prvCopyDataToQueue>
 8002ef6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fe9d 	bl	8003c44 <xTaskRemoveFromEventList>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	e00a      	b.n	8002f38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f28:	4b39      	ldr	r3, [pc, #228]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f38:	f001 fbbc 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e063      	b.n	8003008 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f46:	f001 fbb5 	bl	80046b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e05c      	b.n	8003008 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fed5 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f62:	f001 fba7 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f66:	f000 fc8b 	bl	8003880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f6a:	f001 fb73 	bl	8004654 <vPortEnterCritical>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d103      	bne.n	8002f84 <xQueueGenericSend+0x16c>
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x182>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f9a:	f001 fb8b 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f9e:	1d3a      	adds	r2, r7, #4
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fec4 	bl	8003d34 <xTaskCheckForTimeOut>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d124      	bne.n	8002ffc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb4:	f000 fa24 	bl	8003400 <prvIsQueueFull>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fe18 	bl	8003bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fce:	f000 f9af 	bl	8003330 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fd2:	f000 fc63 	bl	800389c <xTaskResumeAll>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af7c 	bne.w	8002ed6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <xQueueGenericSend+0x1f8>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	e772      	b.n	8002ed6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff2:	f000 f99d 	bl	8003330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff6:	f000 fc51 	bl	800389c <xTaskResumeAll>
 8002ffa:	e76c      	b.n	8002ed6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ffe:	f000 f997 	bl	8003330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003002:	f000 fc4b 	bl	800389c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003008:	4618      	mov	r0, r3
 800300a:	3738      	adds	r7, #56	; 0x38
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800301e:	2300      	movs	r3, #0
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	623b      	str	r3, [r7, #32]
}
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	61fb      	str	r3, [r7, #28]
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003064:	f000 ffaa 	bl	8003fbc <xTaskGetSchedulerState>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <xQueueSemaphoreTake+0x60>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <xQueueSemaphoreTake+0x64>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <xQueueSemaphoreTake+0x66>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	61bb      	str	r3, [r7, #24]
}
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003094:	f001 fade 	bl	8004654 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d024      	beq.n	80030ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d104      	bne.n	80030be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80030b4:	f001 f92a 	bl	800430c <pvTaskIncrementMutexHeldCount>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00f      	beq.n	80030e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	3310      	adds	r3, #16
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fdba 	bl	8003c44 <xTaskRemoveFromEventList>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030d6:	4b54      	ldr	r3, [pc, #336]	; (8003228 <xQueueSemaphoreTake+0x214>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030e6:	f001 fae5 	bl	80046b4 <vPortExitCritical>
				return pdPASS;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e097      	b.n	800321e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	617b      	str	r3, [r7, #20]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003110:	f001 fad0 	bl	80046b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003114:	2300      	movs	r3, #0
 8003116:	e082      	b.n	800321e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800311e:	f107 030c 	add.w	r3, r7, #12
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fdf0 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003128:	2301      	movs	r3, #1
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312c:	f001 fac2 	bl	80046b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003130:	f000 fba6 	bl	8003880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003134:	f001 fa8e 	bl	8004654 <vPortEnterCritical>
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800313e:	b25b      	sxtb	r3, r3
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d103      	bne.n	800314e <xQueueSemaphoreTake+0x13a>
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <xQueueSemaphoreTake+0x150>
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003164:	f001 faa6 	bl	80046b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003168:	463a      	mov	r2, r7
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fddf 	bl	8003d34 <xTaskCheckForTimeOut>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d132      	bne.n	80031e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800317c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800317e:	f000 f929 	bl	80033d4 <prvIsQueueEmpty>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d026      	beq.n	80031d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003190:	f001 fa60 	bl	8004654 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 ff2d 	bl	8003ff8 <xTaskPriorityInherit>
 800319e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80031a0:	f001 fa88 	bl	80046b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fd25 	bl	8003bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b4:	f000 f8bc 	bl	8003330 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031b8:	f000 fb70 	bl	800389c <xTaskResumeAll>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f47f af68 	bne.w	8003094 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80031c4:	4b18      	ldr	r3, [pc, #96]	; (8003228 <xQueueSemaphoreTake+0x214>)
 80031c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	e75e      	b.n	8003094 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80031d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031d8:	f000 f8aa 	bl	8003330 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031dc:	f000 fb5e 	bl	800389c <xTaskResumeAll>
 80031e0:	e758      	b.n	8003094 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80031e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031e4:	f000 f8a4 	bl	8003330 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e8:	f000 fb58 	bl	800389c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031ee:	f000 f8f1 	bl	80033d4 <prvIsQueueEmpty>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f43f af4d 	beq.w	8003094 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003200:	f001 fa28 	bl	8004654 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003206:	f000 f811 	bl	800322c <prvGetDisinheritPriorityAfterTimeout>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f000 ffec 	bl	80041f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003218:	f001 fa4c 	bl	80046b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800321c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800321e:	4618      	mov	r0, r3
 8003220:	3738      	adds	r7, #56	; 0x38
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d006      	beq.n	800324a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e001      	b.n	800324e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800324e:	68fb      	ldr	r3, [r7, #12]
	}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d14d      	bne.n	800331e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 ff2c 	bl	80040e4 <xTaskPriorityDisinherit>
 800328c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	e043      	b.n	800331e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d119      	bne.n	80032d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6858      	ldr	r0, [r3, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	f001 fcc4 	bl	8004c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	441a      	add	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d32b      	bcc.n	800331e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	e026      	b.n	800331e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68d8      	ldr	r0, [r3, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	461a      	mov	r2, r3
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	f001 fcaa 	bl	8004c34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	425b      	negs	r3, r3
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d207      	bcs.n	800330c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	425b      	negs	r3, r3
 8003306:	441a      	add	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d105      	bne.n	800331e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	3b01      	subs	r3, #1
 800331c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003326:	697b      	ldr	r3, [r7, #20]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003338:	f001 f98c 	bl	8004654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003342:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003344:	e011      	b.n	800336a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fc76 	bl	8003c44 <xTaskRemoveFromEventList>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800335e:	f000 fd4b 	bl	8003df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	3b01      	subs	r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	dce9      	bgt.n	8003346 <prvUnlockQueue+0x16>
 8003372:	e000      	b.n	8003376 <prvUnlockQueue+0x46>
					break;
 8003374:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800337e:	f001 f999 	bl	80046b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003382:	f001 f967 	bl	8004654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800338c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800338e:	e011      	b.n	80033b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3310      	adds	r3, #16
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fc51 	bl	8003c44 <xTaskRemoveFromEventList>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033a8:	f000 fd26 	bl	8003df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	dce9      	bgt.n	8003390 <prvUnlockQueue+0x60>
 80033bc:	e000      	b.n	80033c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	22ff      	movs	r2, #255	; 0xff
 80033c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033c8:	f001 f974 	bl	80046b4 <vPortExitCritical>
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033dc:	f001 f93a 	bl	8004654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e001      	b.n	80033f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033f2:	f001 f95f 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003408:	f001 f924 	bl	8004654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	429a      	cmp	r2, r3
 8003416:	d102      	bne.n	800341e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e001      	b.n	8003422 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003422:	f001 f947 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af04      	add	r7, sp, #16
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	623b      	str	r3, [r7, #32]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xTaskCreateStatic+0x46>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	61fb      	str	r3, [r7, #28]
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003476:	2354      	movs	r3, #84	; 0x54
 8003478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b54      	cmp	r3, #84	; 0x54
 800347e:	d00a      	beq.n	8003496 <xTaskCreateStatic+0x66>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	61bb      	str	r3, [r7, #24]
}
 8003492:	bf00      	nop
 8003494:	e7fe      	b.n	8003494 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003496:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01e      	beq.n	80034dc <xTaskCreateStatic+0xac>
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01b      	beq.n	80034dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034b6:	2300      	movs	r3, #0
 80034b8:	9303      	str	r3, [sp, #12]
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f850 	bl	8003574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034d6:	f000 f8d5 	bl	8003684 <prvAddNewTaskToReadyList>
 80034da:	e001      	b.n	80034e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034e0:	697b      	ldr	r3, [r7, #20]
	}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08c      	sub	sp, #48	; 0x30
 80034ee:	af04      	add	r7, sp, #16
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f98a 	bl	8004818 <pvPortMalloc>
 8003504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800350c:	2054      	movs	r0, #84	; 0x54
 800350e:	f001 f983 	bl	8004818 <pvPortMalloc>
 8003512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
 8003520:	e005      	b.n	800352e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f001 fa44 	bl	80049b0 <vPortFree>
 8003528:	e001      	b.n	800352e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d017      	beq.n	8003564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	2300      	movs	r3, #0
 8003540:	9303      	str	r3, [sp, #12]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f80e 	bl	8003574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003558:	69f8      	ldr	r0, [r7, #28]
 800355a:	f000 f893 	bl	8003684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e002      	b.n	800356a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800356a:	69bb      	ldr	r3, [r7, #24]
	}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800358c:	3b01      	subs	r3, #1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f023 0307 	bic.w	r3, r3, #7
 800359a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <prvInitialiseNewTask+0x48>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	617b      	str	r3, [r7, #20]
}
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01f      	beq.n	8003602 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e012      	b.n	80035ee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	7819      	ldrb	r1, [r3, #0]
 80035d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	3334      	adds	r3, #52	; 0x34
 80035d8:	460a      	mov	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3301      	adds	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d9e9      	bls.n	80035c8 <prvInitialiseNewTask+0x54>
 80035f4:	e000      	b.n	80035f8 <prvInitialiseNewTask+0x84>
			{
				break;
 80035f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003600:	e003      	b.n	800360a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2b06      	cmp	r3, #6
 800360e:	d901      	bls.n	8003614 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003610:	2306      	movs	r3, #6
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2200      	movs	r2, #0
 8003624:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	3304      	adds	r3, #4
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fa6c 	bl	8002b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	3318      	adds	r3, #24
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa67 	bl	8002b08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800363e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	f1c3 0207 	rsb	r2, r3, #7
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	69b8      	ldr	r0, [r7, #24]
 8003664:	f000 fecc 	bl	8004400 <pxPortInitialiseStack>
 8003668:	4602      	mov	r2, r0
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800368c:	f000 ffe2 	bl	8004654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <prvAddNewTaskToReadyList+0xb8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a29      	ldr	r2, [pc, #164]	; (800373c <prvAddNewTaskToReadyList+0xb8>)
 8003698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <prvAddNewTaskToReadyList+0xbc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036a2:	4a27      	ldr	r2, [pc, #156]	; (8003740 <prvAddNewTaskToReadyList+0xbc>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <prvAddNewTaskToReadyList+0xb8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d110      	bne.n	80036d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036b0:	f000 fbc6 	bl	8003e40 <prvInitialiseTaskLists>
 80036b4:	e00d      	b.n	80036d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <prvAddNewTaskToReadyList+0xc0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <prvAddNewTaskToReadyList+0xbc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d802      	bhi.n	80036d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <prvAddNewTaskToReadyList+0xbc>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <prvAddNewTaskToReadyList+0xc4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <prvAddNewTaskToReadyList+0xc4>)
 80036da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2201      	movs	r2, #1
 80036e2:	409a      	lsls	r2, r3
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <prvAddNewTaskToReadyList+0xc8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	4a18      	ldr	r2, [pc, #96]	; (800374c <prvAddNewTaskToReadyList+0xc8>)
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <prvAddNewTaskToReadyList+0xcc>)
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff fa0c 	bl	8002b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800370a:	f000 ffd3 	bl	80046b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <prvAddNewTaskToReadyList+0xc0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <prvAddNewTaskToReadyList+0xbc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	429a      	cmp	r2, r3
 8003722:	d207      	bcs.n	8003734 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <prvAddNewTaskToReadyList+0xd0>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000420 	.word	0x20000420
 8003740:	20000320 	.word	0x20000320
 8003744:	2000042c 	.word	0x2000042c
 8003748:	2000043c 	.word	0x2000043c
 800374c:	20000428 	.word	0x20000428
 8003750:	20000324 	.word	0x20000324
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <vTaskDelay+0x60>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <vTaskDelay+0x30>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	60bb      	str	r3, [r7, #8]
}
 8003784:	bf00      	nop
 8003786:	e7fe      	b.n	8003786 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003788:	f000 f87a 	bl	8003880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fdd0 	bl	8004334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003794:	f000 f882 	bl	800389c <xTaskResumeAll>
 8003798:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <vTaskDelay+0x64>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000448 	.word	0x20000448
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037ce:	463a      	mov	r2, r7
 80037d0:	1d39      	adds	r1, r7, #4
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fea4 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	9202      	str	r2, [sp, #8]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	460a      	mov	r2, r1
 80037ee:	491e      	ldr	r1, [pc, #120]	; (8003868 <vTaskStartScheduler+0xa8>)
 80037f0:	481e      	ldr	r0, [pc, #120]	; (800386c <vTaskStartScheduler+0xac>)
 80037f2:	f7ff fe1d 	bl	8003430 <xTaskCreateStatic>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <vTaskStartScheduler+0xb0>)
 80037fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037fc:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <vTaskStartScheduler+0xb0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e001      	b.n	800380e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d116      	bne.n	8003842 <vTaskStartScheduler+0x82>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	613b      	str	r3, [r7, #16]
}
 8003826:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <vTaskStartScheduler+0xb4>)
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <vTaskStartScheduler+0xb8>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <vTaskStartScheduler+0xbc>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800383c:	f000 fe68 	bl	8004510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003840:	e00e      	b.n	8003860 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d10a      	bne.n	8003860 <vTaskStartScheduler+0xa0>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60fb      	str	r3, [r7, #12]
}
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <vTaskStartScheduler+0x9e>
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	08004d24 	.word	0x08004d24
 800386c:	08003e11 	.word	0x08003e11
 8003870:	20000444 	.word	0x20000444
 8003874:	20000440 	.word	0x20000440
 8003878:	2000042c 	.word	0x2000042c
 800387c:	20000424 	.word	0x20000424

08003880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <vTaskSuspendAll+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a03      	ldr	r2, [pc, #12]	; (8003898 <vTaskSuspendAll+0x18>)
 800388c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000448 	.word	0x20000448

0800389c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <xTaskResumeAll+0x114>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10a      	bne.n	80038c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	603b      	str	r3, [r7, #0]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038c8:	f000 fec4 	bl	8004654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <xTaskResumeAll+0x114>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <xTaskResumeAll+0x114>)
 80038d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <xTaskResumeAll+0x114>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d161      	bne.n	80039a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038de:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <xTaskResumeAll+0x118>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d05d      	beq.n	80039a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e6:	e02e      	b.n	8003946 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <xTaskResumeAll+0x11c>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3318      	adds	r3, #24
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f971 	bl	8002bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f96c 	bl	8002bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <xTaskResumeAll+0x120>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <xTaskResumeAll+0x120>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <xTaskResumeAll+0x124>)
 8003924:	441a      	add	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7ff f8f8 	bl	8002b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <xTaskResumeAll+0x128>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <xTaskResumeAll+0x11c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1cc      	bne.n	80038e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003954:	f000 fb12 	bl	8003f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <xTaskResumeAll+0x130>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d010      	beq.n	8003986 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003964:	f000 f836 	bl	80039d4 <xTaskIncrementTick>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f1      	bne.n	8003964 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <xTaskResumeAll+0x130>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <xTaskResumeAll+0x12c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800398e:	2301      	movs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <xTaskResumeAll+0x134>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a2:	f000 fe87 	bl	80046b4 <vPortExitCritical>

	return xAlreadyYielded;
 80039a6:	68bb      	ldr	r3, [r7, #8]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000448 	.word	0x20000448
 80039b4:	20000420 	.word	0x20000420
 80039b8:	200003e0 	.word	0x200003e0
 80039bc:	20000428 	.word	0x20000428
 80039c0:	20000324 	.word	0x20000324
 80039c4:	20000320 	.word	0x20000320
 80039c8:	20000434 	.word	0x20000434
 80039cc:	20000430 	.word	0x20000430
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <xTaskIncrementTick+0x144>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 808e 	bne.w	8003b04 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e8:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <xTaskIncrementTick+0x148>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039f0:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <xTaskIncrementTick+0x148>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039fc:	4b48      	ldr	r3, [pc, #288]	; (8003b20 <xTaskIncrementTick+0x14c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <xTaskIncrementTick+0x48>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	603b      	str	r3, [r7, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskIncrementTick+0x46>
 8003a1c:	4b40      	ldr	r3, [pc, #256]	; (8003b20 <xTaskIncrementTick+0x14c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3e      	ldr	r2, [pc, #248]	; (8003b20 <xTaskIncrementTick+0x14c>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4a3e      	ldr	r2, [pc, #248]	; (8003b24 <xTaskIncrementTick+0x150>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4a3c      	ldr	r2, [pc, #240]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	f000 fa9f 	bl	8003f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d348      	bcc.n	8003ada <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <xTaskIncrementTick+0x14c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a52:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
					break;
 8003a5a:	e03e      	b.n	8003ada <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <xTaskIncrementTick+0x14c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d203      	bcs.n	8003a7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a74:	4a2d      	ldr	r2, [pc, #180]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a7a:	e02e      	b.n	8003ada <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f8ab 	bl	8002bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f8a2 	bl	8002bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	4a22      	ldr	r2, [pc, #136]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003ab8:	441a      	add	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f7ff f82e 	bl	8002b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d3b9      	bcc.n	8003a48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad8:	e7b6      	b.n	8003a48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4914      	ldr	r1, [pc, #80]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d901      	bls.n	8003af6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <xTaskIncrementTick+0x168>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
 8003b02:	e004      	b.n	8003b0e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <xTaskIncrementTick+0x16c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <xTaskIncrementTick+0x16c>)
 8003b0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b0e:	697b      	ldr	r3, [r7, #20]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000448 	.word	0x20000448
 8003b1c:	20000424 	.word	0x20000424
 8003b20:	200003d8 	.word	0x200003d8
 8003b24:	200003dc 	.word	0x200003dc
 8003b28:	20000438 	.word	0x20000438
 8003b2c:	20000440 	.word	0x20000440
 8003b30:	20000428 	.word	0x20000428
 8003b34:	20000324 	.word	0x20000324
 8003b38:	20000320 	.word	0x20000320
 8003b3c:	20000434 	.word	0x20000434
 8003b40:	20000430 	.word	0x20000430

08003b44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <vTaskSwitchContext+0xa4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <vTaskSwitchContext+0xa8>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b58:	e03f      	b.n	8003bda <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <vTaskSwitchContext+0xa8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <vTaskSwitchContext+0xac>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
 8003b70:	f1c3 031f 	rsb	r3, r3, #31
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	491f      	ldr	r1, [pc, #124]	; (8003bf4 <vTaskSwitchContext+0xb0>)
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	607b      	str	r3, [r7, #4]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <vTaskSwitchContext+0x5a>
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <vTaskSwitchContext+0xb0>)
 8003bac:	4413      	add	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d104      	bne.n	8003bd0 <vTaskSwitchContext+0x8c>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <vTaskSwitchContext+0xb4>)
 8003bd8:	6013      	str	r3, [r2, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000448 	.word	0x20000448
 8003bec:	20000434 	.word	0x20000434
 8003bf0:	20000428 	.word	0x20000428
 8003bf4:	20000324 	.word	0x20000324
 8003bf8:	20000320 	.word	0x20000320

08003bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	60fb      	str	r3, [r7, #12]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <vTaskPlaceOnEventList+0x44>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3318      	adds	r3, #24
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fe ff9d 	bl	8002b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c30:	2101      	movs	r1, #1
 8003c32:	6838      	ldr	r0, [r7, #0]
 8003c34:	f000 fb7e 	bl	8004334 <prvAddCurrentTaskToDelayedList>
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000320 	.word	0x20000320

08003c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60fb      	str	r3, [r7, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	3318      	adds	r3, #24
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe ffb1 	bl	8002bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <xTaskRemoveFromEventList+0xac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11c      	bne.n	8003cbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ffa8 	bl	8002bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <xTaskRemoveFromEventList+0xb0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <xTaskRemoveFromEventList+0xb0>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <xTaskRemoveFromEventList+0xb4>)
 8003cac:	441a      	add	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fe ff34 	bl	8002b22 <vListInsertEnd>
 8003cba:	e005      	b.n	8003cc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	480e      	ldr	r0, [pc, #56]	; (8003cfc <xTaskRemoveFromEventList+0xb8>)
 8003cc4:	f7fe ff2d 	bl	8002b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <xTaskRemoveFromEventList+0xbc>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d905      	bls.n	8003ce2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <xTaskRemoveFromEventList+0xc0>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e001      	b.n	8003ce6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ce6:	697b      	ldr	r3, [r7, #20]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000448 	.word	0x20000448
 8003cf4:	20000428 	.word	0x20000428
 8003cf8:	20000324 	.word	0x20000324
 8003cfc:	200003e0 	.word	0x200003e0
 8003d00:	20000320 	.word	0x20000320
 8003d04:	20000434 	.word	0x20000434

08003d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <vTaskInternalSetTimeOutState+0x24>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <vTaskInternalSetTimeOutState+0x28>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	605a      	str	r2, [r3, #4]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000438 	.word	0x20000438
 8003d30:	20000424 	.word	0x20000424

08003d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d76:	f000 fc6d 	bl	8004654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <xTaskCheckForTimeOut+0xbc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d102      	bne.n	8003d9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	e023      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <xTaskCheckForTimeOut+0xc0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d007      	beq.n	8003db6 <xTaskCheckForTimeOut+0x82>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e015      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d20b      	bcs.n	8003dd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff9b 	bl	8003d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e004      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003de2:	f000 fc67 	bl	80046b4 <vPortExitCritical>

	return xReturn;
 8003de6:	69fb      	ldr	r3, [r7, #28]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000424 	.word	0x20000424
 8003df4:	20000438 	.word	0x20000438

08003df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <vTaskMissedYield+0x14>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000434 	.word	0x20000434

08003e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e18:	f000 f852 	bl	8003ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prvIdleTask+0x28>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d9f9      	bls.n	8003e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <prvIdleTask+0x2c>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e34:	e7f0      	b.n	8003e18 <prvIdleTask+0x8>
 8003e36:	bf00      	nop
 8003e38:	20000324 	.word	0x20000324
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	e00c      	b.n	8003e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <prvInitialiseTaskLists+0x60>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fe34 	bl	8002ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3301      	adds	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d9ef      	bls.n	8003e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e6c:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <prvInitialiseTaskLists+0x64>)
 8003e6e:	f7fe fe2b 	bl	8002ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e72:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <prvInitialiseTaskLists+0x68>)
 8003e74:	f7fe fe28 	bl	8002ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <prvInitialiseTaskLists+0x6c>)
 8003e7a:	f7fe fe25 	bl	8002ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e7e:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <prvInitialiseTaskLists+0x70>)
 8003e80:	f7fe fe22 	bl	8002ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <prvInitialiseTaskLists+0x74>)
 8003e86:	f7fe fe1f 	bl	8002ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <prvInitialiseTaskLists+0x78>)
 8003e8c:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <prvInitialiseTaskLists+0x64>)
 8003e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvInitialiseTaskLists+0x7c>)
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <prvInitialiseTaskLists+0x68>)
 8003e94:	601a      	str	r2, [r3, #0]
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000324 	.word	0x20000324
 8003ea4:	200003b0 	.word	0x200003b0
 8003ea8:	200003c4 	.word	0x200003c4
 8003eac:	200003e0 	.word	0x200003e0
 8003eb0:	200003f4 	.word	0x200003f4
 8003eb4:	2000040c 	.word	0x2000040c
 8003eb8:	200003d8 	.word	0x200003d8
 8003ebc:	200003dc 	.word	0x200003dc

08003ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec6:	e019      	b.n	8003efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec8:	f000 fbc4 	bl	8004654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <prvCheckTasksWaitingTermination+0x50>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fe7f 	bl	8002bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ede:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <prvCheckTasksWaitingTermination+0x54>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <prvCheckTasksWaitingTermination+0x54>)
 8003ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ef2:	f000 fbdf 	bl	80046b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f810 	bl	8003f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e1      	bne.n	8003ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200003f4 	.word	0x200003f4
 8003f14:	20000420 	.word	0x20000420
 8003f18:	20000408 	.word	0x20000408

08003f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fd3c 	bl	80049b0 <vPortFree>
				vPortFree( pxTCB );
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fd39 	bl	80049b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f3e:	e018      	b.n	8003f72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d103      	bne.n	8003f52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fd30 	bl	80049b0 <vPortFree>
	}
 8003f50:	e00f      	b.n	8003f72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d00a      	beq.n	8003f72 <prvDeleteTCB+0x56>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	60fb      	str	r3, [r7, #12]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <prvDeleteTCB+0x54>
	}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvResetNextTaskUnblockTime+0x38>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f94:	e008      	b.n	8003fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <prvResetNextTaskUnblockTime+0x38>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	200003d8 	.word	0x200003d8
 8003fb8:	20000440 	.word	0x20000440

08003fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <xTaskGetSchedulerState+0x34>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	e008      	b.n	8003fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <xTaskGetSchedulerState+0x38>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	e001      	b.n	8003fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fe2:	687b      	ldr	r3, [r7, #4]
	}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	2000042c 	.word	0x2000042c
 8003ff4:	20000448 	.word	0x20000448

08003ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d05e      	beq.n	80040cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <xTaskPriorityInherit+0xe0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	429a      	cmp	r2, r3
 800401a:	d24e      	bcs.n	80040ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	db06      	blt.n	8004032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004024:	4b2c      	ldr	r3, [pc, #176]	; (80040d8 <xTaskPriorityInherit+0xe0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f1c3 0207 	rsb	r2, r3, #7
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6959      	ldr	r1, [r3, #20]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a26      	ldr	r2, [pc, #152]	; (80040dc <xTaskPriorityInherit+0xe4>)
 8004044:	4413      	add	r3, r2
 8004046:	4299      	cmp	r1, r3
 8004048:	d12f      	bne.n	80040aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fdc4 	bl	8002bdc <uxListRemove>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	2201      	movs	r2, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43da      	mvns	r2, r3
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <xTaskPriorityInherit+0xe8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4013      	ands	r3, r2
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <xTaskPriorityInherit+0xe8>)
 800406e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <xTaskPriorityInherit+0xe0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	2201      	movs	r2, #1
 8004080:	409a      	lsls	r2, r3
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <xTaskPriorityInherit+0xe8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4313      	orrs	r3, r2
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <xTaskPriorityInherit+0xe8>)
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <xTaskPriorityInherit+0xe4>)
 800409a:	441a      	add	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7fe fd3d 	bl	8002b22 <vListInsertEnd>
 80040a8:	e004      	b.n	80040b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <xTaskPriorityInherit+0xe0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e008      	b.n	80040cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <xTaskPriorityInherit+0xe0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d201      	bcs.n	80040cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040cc:	68fb      	ldr	r3, [r7, #12]
	}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000320 	.word	0x20000320
 80040dc:	20000324 	.word	0x20000324
 80040e0:	20000428 	.word	0x20000428

080040e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d06e      	beq.n	80041d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040fa:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <xTaskPriorityDisinherit+0x100>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d00a      	beq.n	800411a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	1e5a      	subs	r2, r3, #1
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	429a      	cmp	r2, r3
 800414c:	d044      	beq.n	80041d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	2b00      	cmp	r3, #0
 8004154:	d140      	bne.n	80041d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3304      	adds	r3, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fd3e 	bl	8002bdc <uxListRemove>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d115      	bne.n	8004192 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	491f      	ldr	r1, [pc, #124]	; (80041e8 <xTaskPriorityDisinherit+0x104>)
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xTaskPriorityDisinherit+0xae>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	2201      	movs	r2, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	43da      	mvns	r2, r3
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <xTaskPriorityDisinherit+0x108>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4013      	ands	r3, r2
 800418e:	4a17      	ldr	r2, [pc, #92]	; (80041ec <xTaskPriorityDisinherit+0x108>)
 8004190:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f1c3 0207 	rsb	r2, r3, #7
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	2201      	movs	r2, #1
 80041ac:	409a      	lsls	r2, r3
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <xTaskPriorityDisinherit+0x108>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <xTaskPriorityDisinherit+0x108>)
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <xTaskPriorityDisinherit+0x104>)
 80041c6:	441a      	add	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7fe fca7 	bl	8002b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041d8:	697b      	ldr	r3, [r7, #20]
	}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000320 	.word	0x20000320
 80041e8:	20000324 	.word	0x20000324
 80041ec:	20000428 	.word	0x20000428

080041f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d077      	beq.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	60fb      	str	r3, [r7, #12]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d902      	bls.n	8004236 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e002      	b.n	800423c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	429a      	cmp	r2, r3
 8004244:	d058      	beq.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d153      	bne.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	429a      	cmp	r2, r3
 8004258:	d10a      	bne.n	8004270 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	60bb      	str	r3, [r7, #8]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db04      	blt.n	800428e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0207 	rsb	r2, r3, #7
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	6959      	ldr	r1, [r3, #20]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800429e:	4413      	add	r3, r2
 80042a0:	4299      	cmp	r1, r3
 80042a2:	d129      	bne.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fc97 	bl	8002bdc <uxListRemove>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	2201      	movs	r2, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43da      	mvns	r2, r3
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4013      	ands	r3, r2
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	2201      	movs	r2, #1
 80042d0:	409a      	lsls	r2, r3
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4a06      	ldr	r2, [pc, #24]	; (8004304 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80042ea:	441a      	add	r2, r3
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f7fe fc15 	bl	8002b22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042f8:	bf00      	nop
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000320 	.word	0x20000320
 8004304:	20000324 	.word	0x20000324
 8004308:	20000428 	.word	0x20000428

0800430c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <pvTaskIncrementMutexHeldCount+0x24>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <pvTaskIncrementMutexHeldCount+0x24>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800431e:	3201      	adds	r2, #1
 8004320:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004322:	4b03      	ldr	r3, [pc, #12]	; (8004330 <pvTaskIncrementMutexHeldCount+0x24>)
 8004324:	681b      	ldr	r3, [r3, #0]
	}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20000320 	.word	0x20000320

08004334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fc46 	bl	8002bdc <uxListRemove>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4013      	ands	r3, r2
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800436c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d10a      	bne.n	800438c <prvAddCurrentTaskToDelayedList+0x58>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	481a      	ldr	r0, [pc, #104]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004386:	f7fe fbcc 	bl	8002b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800438a:	e026      	b.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d209      	bcs.n	80043b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7fe fbda 	bl	8002b6a <vListInsert>
}
 80043b6:	e010      	b.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7fe fbd0 	bl	8002b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d202      	bcs.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043d4:	4a09      	ldr	r2, [pc, #36]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000424 	.word	0x20000424
 80043e8:	20000320 	.word	0x20000320
 80043ec:	20000428 	.word	0x20000428
 80043f0:	2000040c 	.word	0x2000040c
 80043f4:	200003dc 	.word	0x200003dc
 80043f8:	200003d8 	.word	0x200003d8
 80043fc:	20000440 	.word	0x20000440

08004400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b04      	subs	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b04      	subs	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b04      	subs	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <pxPortInitialiseStack+0x64>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b14      	subs	r3, #20
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b04      	subs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f06f 0202 	mvn.w	r2, #2
 800444e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b20      	subs	r3, #32
 8004454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	08004469 	.word	0x08004469

08004468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <prvTaskExitError+0x54>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d00a      	beq.n	8004492 <prvTaskExitError+0x2a>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvTaskExitError+0x28>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
}
 80044a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044a6:	bf00      	nop
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0fc      	beq.n	80044a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <pxCurrentTCBConst2>)
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	f380 8809 	msr	PSP, r0
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	4770      	bx	lr
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst2>:
 80044e0:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044e8:	4808      	ldr	r0, [pc, #32]	; (800450c <prvPortStartFirstTask+0x24>)
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f380 8808 	msr	MSP, r0
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8814 	msr	CONTROL, r0
 80044fa:	b662      	cpsie	i
 80044fc:	b661      	cpsie	f
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	df00      	svc	0
 8004508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800450a:	bf00      	nop
 800450c:	e000ed08 	.word	0xe000ed08

08004510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <xPortStartScheduler+0x120>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a46      	ldr	r2, [pc, #280]	; (8004634 <xPortStartScheduler+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10a      	bne.n	8004536 <xPortStartScheduler+0x26>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <xPortStartScheduler+0x120>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <xPortStartScheduler+0x128>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10a      	bne.n	8004556 <xPortStartScheduler+0x46>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <xPortStartScheduler+0x12c>)
 8004558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <xPortStartScheduler+0x130>)
 800457c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xPortStartScheduler+0x134>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004584:	e009      	b.n	800459a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004586:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <xPortStartScheduler+0x134>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3b01      	subs	r3, #1
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <xPortStartScheduler+0x134>)
 800458e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d0ef      	beq.n	8004586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <xPortStartScheduler+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d00a      	beq.n	80045c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60bb      	str	r3, [r7, #8]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <xPortStartScheduler+0x134>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <xPortStartScheduler+0x134>)
 80045d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <xPortStartScheduler+0x134>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045da:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <xPortStartScheduler+0x134>)
 80045dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <xPortStartScheduler+0x138>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <xPortStartScheduler+0x138>)
 80045ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <xPortStartScheduler+0x138>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <xPortStartScheduler+0x138>)
 80045f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045fe:	f000 f8dd 	bl	80047bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <xPortStartScheduler+0x13c>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004608:	f000 f8fc 	bl	8004804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xPortStartScheduler+0x140>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <xPortStartScheduler+0x140>)
 8004612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004618:	f7ff ff66 	bl	80044e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800461c:	f7ff fa92 	bl	8003b44 <vTaskSwitchContext>
	prvTaskExitError();
 8004620:	f7ff ff22 	bl	8004468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	410fc271 	.word	0x410fc271
 8004638:	410fc270 	.word	0x410fc270
 800463c:	e000e400 	.word	0xe000e400
 8004640:	2000044c 	.word	0x2000044c
 8004644:	20000450 	.word	0x20000450
 8004648:	e000ed20 	.word	0xe000ed20
 800464c:	2000000c 	.word	0x2000000c
 8004650:	e000ef34 	.word	0xe000ef34

08004654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <vPortEnterCritical+0x58>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <vPortEnterCritical+0x58>)
 8004676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <vPortEnterCritical+0x58>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10f      	bne.n	80046a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortEnterCritical+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vPortEnterCritical+0x4a>
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <vPortExitCritical+0x50>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <vPortExitCritical+0x24>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <vPortExitCritical+0x50>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <vPortExitCritical+0x50>)
 80046e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <vPortExitCritical+0x50>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <vPortExitCritical+0x42>
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c
	...

08004710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004710:	f3ef 8009 	mrs	r0, PSP
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <pxCurrentTCBConst>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f01e 0f10 	tst.w	lr, #16
 8004720:	bf08      	it	eq
 8004722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	6010      	str	r0, [r2, #0]
 800472c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004734:	f380 8811 	msr	BASEPRI, r0
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f7ff fa00 	bl	8003b44 <vTaskSwitchContext>
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f380 8811 	msr	BASEPRI, r0
 800474c:	bc09      	pop	{r0, r3}
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004756:	f01e 0f10 	tst.w	lr, #16
 800475a:	bf08      	it	eq
 800475c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004760:	f380 8809 	msr	PSP, r0
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst>:
 8004770:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	607b      	str	r3, [r7, #4]
}
 8004790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004792:	f7ff f91f 	bl	80039d4 <xTaskIncrementTick>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <SysTick_Handler+0x40>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f383 8811 	msr	BASEPRI, r3
}
 80047ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <vPortSetupTimerInterrupt+0x38>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortSetupTimerInterrupt+0x3c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <vPortSetupTimerInterrupt+0x40>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <vPortSetupTimerInterrupt+0x44>)
 80047da:	3b01      	subs	r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010
 80047f4:	e000e018 	.word	0xe000e018
 80047f8:	20000000 	.word	0x20000000
 80047fc:	10624dd3 	.word	0x10624dd3
 8004800:	e000e014 	.word	0xe000e014

08004804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004814 <vPortEnableVFP+0x10>
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800480e:	6001      	str	r1, [r0, #0]
 8004810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004812:	bf00      	nop
 8004814:	e000ed88 	.word	0xe000ed88

08004818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004824:	f7ff f82c 	bl	8003880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <pvPortMalloc+0x180>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004830:	f000 f920 	bl	8004a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004834:	4b59      	ldr	r3, [pc, #356]	; (800499c <pvPortMalloc+0x184>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 8093 	bne.w	8004968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004848:	2208      	movs	r2, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <pvPortMalloc+0x6c>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	617b      	str	r3, [r7, #20]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06e      	beq.n	8004968 <pvPortMalloc+0x150>
 800488a:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <pvPortMalloc+0x188>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d869      	bhi.n	8004968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004894:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <pvPortMalloc+0x18c>)
 8004896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <pvPortMalloc+0x18c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489e:	e004      	b.n	80048aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <pvPortMalloc+0xa4>
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f1      	bne.n	80048a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <pvPortMalloc+0x180>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d050      	beq.n	8004968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2208      	movs	r2, #8
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	2308      	movs	r3, #8
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d91f      	bls.n	8004928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <pvPortMalloc+0xf8>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	613b      	str	r3, [r7, #16]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004922:	69b8      	ldr	r0, [r7, #24]
 8004924:	f000 f908 	bl	8004b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <pvPortMalloc+0x188>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <pvPortMalloc+0x188>)
 8004934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <pvPortMalloc+0x188>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <pvPortMalloc+0x190>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d203      	bcs.n	800494a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <pvPortMalloc+0x188>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	; (80049a8 <pvPortMalloc+0x190>)
 8004948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <pvPortMalloc+0x184>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	431a      	orrs	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <pvPortMalloc+0x194>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a11      	ldr	r2, [pc, #68]	; (80049ac <pvPortMalloc+0x194>)
 8004966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004968:	f7fe ff98 	bl	800389c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <pvPortMalloc+0x174>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60fb      	str	r3, [r7, #12]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <pvPortMalloc+0x172>
	return pvReturn;
 800498c:	69fb      	ldr	r3, [r7, #28]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3728      	adds	r7, #40	; 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	2000405c 	.word	0x2000405c
 800499c:	20004070 	.word	0x20004070
 80049a0:	20004060 	.word	0x20004060
 80049a4:	20004054 	.word	0x20004054
 80049a8:	20004064 	.word	0x20004064
 80049ac:	20004068 	.word	0x20004068

080049b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04d      	beq.n	8004a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049c2:	2308      	movs	r3, #8
 80049c4:	425b      	negs	r3, r3
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4413      	add	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <vPortFree+0xb8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <vPortFree+0x44>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60fb      	str	r3, [r7, #12]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <vPortFree+0x62>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60bb      	str	r3, [r7, #8]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <vPortFree+0xb8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01e      	beq.n	8004a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11a      	bne.n	8004a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <vPortFree+0xb8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	401a      	ands	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a38:	f7fe ff22 	bl	8003880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <vPortFree+0xbc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a09      	ldr	r2, [pc, #36]	; (8004a6c <vPortFree+0xbc>)
 8004a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a4a:	6938      	ldr	r0, [r7, #16]
 8004a4c:	f000 f874 	bl	8004b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <vPortFree+0xc0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	4a06      	ldr	r2, [pc, #24]	; (8004a70 <vPortFree+0xc0>)
 8004a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a5a:	f7fe ff1f 	bl	800389c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20004070 	.word	0x20004070
 8004a6c:	20004060 	.word	0x20004060
 8004a70:	2000406c 	.word	0x2000406c

08004a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a80:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <prvHeapInit+0xac>)
 8004a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00c      	beq.n	8004aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3307      	adds	r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0307 	bic.w	r3, r3, #7
 8004a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <prvHeapInit+0xac>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <prvHeapInit+0xb0>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <prvHeapInit+0xb0>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	4413      	add	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0307 	bic.w	r3, r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <prvHeapInit+0xb4>)
 8004ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <prvHeapInit+0xb4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <prvHeapInit+0xb4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <prvHeapInit+0xb4>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <prvHeapInit+0xb8>)
 8004b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <prvHeapInit+0xbc>)
 8004b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <prvHeapInit+0xc0>)
 8004b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b12:	601a      	str	r2, [r3, #0]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	20000454 	.word	0x20000454
 8004b24:	20004054 	.word	0x20004054
 8004b28:	2000405c 	.word	0x2000405c
 8004b2c:	20004064 	.word	0x20004064
 8004b30:	20004060 	.word	0x20004060
 8004b34:	20004070 	.word	0x20004070

08004b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b40:	4b28      	ldr	r3, [pc, #160]	; (8004be4 <prvInsertBlockIntoFreeList+0xac>)
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e002      	b.n	8004b4c <prvInsertBlockIntoFreeList+0x14>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d8f7      	bhi.n	8004b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d108      	bne.n	8004b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d118      	bne.n	8004bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d00d      	beq.n	8004bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e008      	b.n	8004bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <prvInsertBlockIntoFreeList+0xb0>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e003      	b.n	8004bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d002      	beq.n	8004bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20004054 	.word	0x20004054
 8004be8:	2000405c 	.word	0x2000405c

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f82e 	bl	8004c60 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004d4c 	.word	0x08004d4c
 8004c28:	08004d4c 	.word	0x08004d4c
 8004c2c:	08004d4c 	.word	0x08004d4c
 8004c30:	08004d50 	.word	0x08004d50

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <memset>:
 8004c50:	4402      	add	r2, r0
 8004c52:	4603      	mov	r3, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
